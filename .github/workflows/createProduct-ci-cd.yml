name: Docker Image CI/CD for Product Service - Create

on:
  push:
    paths:
      - 'catalog/createProductService/**'
    branches: ["test"]
  pull_request:
    paths:
      - 'catalog/createProductService/**'
    branches: ["QA", "main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Checkout del repositorio
    - name: Checkout code
      uses: actions/checkout@v3

    # Paso 2: Login en Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Paso 3: Construir la imagen Docker usando los secrets
    - name: Build Docker image
      run: |
        docker build catalog/createProductService/. --file catalog/createProductService/Dockerfile \
          --build-arg MONGO_URI=${{ secrets.MONGO_URI }} \
          --build-arg DB_NAME=${{ secrets.DB_NAME }} \
          --build-arg SERVER_PORT=${{ secrets.SERVER_PORT_CREATE_PRODUCT }} \
          --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_S3 }} \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_S3 }} \
          --build-arg S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
          --build-arg AWS_REGION=${{ secrets.AWS_REGION_S3 }} \
          -t ${{ secrets.DOCKER_USERNAME }}/create-product-service:latest

    # Paso 4: Subir la imagen a Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/create-product-service:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Conectar al servidor EC2 usando SSH
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST_CREATE_PRODUCT }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Verificar si Docker está instalado
          if ! command -v docker &> /dev/null; then
            echo "==> Installing Docker"
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
          fi

          # Detener y eliminar el contenedor previo si existe
          echo "Deteniendo y eliminando contenedor previo..."
          sudo docker stop create-product-service || true
          sudo docker rm create-product-service || true
          
          # Descargar la última imagen desde Docker Hub
          echo "Actualizando imagen desde Docker Hub..."
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/create-product-service:latest
          
          # Ejecutar el nuevo contenedor en el puerto 80
          echo "Ejecutando nuevo contenedor en el puerto ${{
            secrets.SERVER_PORT_CREATE_PRODUCT }}..."
          sudo docker run -d \
            --name create-product-service \
            -p 80:${{ secrets.SERVER_PORT_CREATE_PRODUCT }} \
            -e MONGO_URI=${{ secrets.MONGO_URI }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e SERVER_PORT=${{ secrets.SERVER_PORT_CREATE_PRODUCT }} \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_S3 }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_S3 }} \
            -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            -e AWS_REGION=${{ secrets.AWS_REGION_S3 }} \
            ${{ secrets.DOCKER_USERNAME }}/create-product-service:latest

          # Verificar que el contenedor esté corriendo
          if sudo docker ps -f name=create-product-service | grep create-product-service; then
            echo "Contenedor corriendo correctamente."
          else
            echo "Error al iniciar el contenedor. Revisa los logs."
            exit 1
          fi
