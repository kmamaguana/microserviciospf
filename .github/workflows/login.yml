name: Docker Image CI/CD for Login Service

on:
  push:
    paths:
      - 'user/login/**'
    branches: [ "test" ]
  pull_request:
    paths:
      - 'user/login/**'
    branches: 
      - "QA"
      - "main"

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Obtener información del commit para versiones
      - name: Extract version from Git
        id: vars
        run: |
          echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "version_tag=$(date +'%Y%m%d')-${{ github.run_number }}" >> $GITHUB_ENV

      # 3. Log in en DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Construir y subir la imagen Docker a DockerHub
      - name: Build and push Docker image
        run: |
          docker build user/login/. --file user/login/Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/login-service:${{ env.version_tag }} --tag ${{ secrets.DOCKER_USERNAME }}/login-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/login-service:${{ env.version_tag }}
          docker push ${{ secrets.DOCKER_USERNAME }}/login-service:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # 1. Conectar a EC2 y desplegar la aplicación
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user

            # Descargar la imagen Docker desde DockerHub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/login-service:latest

            # Detener cualquier contenedor existente y desplegar el nuevo
            sudo docker ps -q --filter "name=login-service" | grep -q . && sudo docker stop login-service && sudo docker rm login-service || true
            sudo docker run -d --name login-service -p 80:80 ${{ secrets.DOCKER_USERNAME }}/login-service:latest
