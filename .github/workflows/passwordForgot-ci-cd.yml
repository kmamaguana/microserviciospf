name: Docker Image CI/CD for Password Forgot Service

on:
  push:
    paths:
      - 'user/passwordForgot/**'
    branches: [ "test" ]
  pull_request:
    paths:
      - 'user/passwordForgot/**'
    branches: 
      - "QA"
      - "main"

jobs:
  build-and-deploy:
    name: Build, Push Docker Image and Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Instalar JDK y Maven
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 3. Construir el archivo .jar sin ejecutar pruebas
      - name: Build .jar file (Skip tests)
        run: mvn clean install -DskipTests -f user/passwordForgot/pom.xml
        env:
          # Variables comunes
          APP_NAME: ${{ secrets.APP_NAME_PASSWORD_FORGOT }}
          SERVER_PORT: ${{ secrets.SERVER_PORT_PASSWORD_FORGOT }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DRIVER: ${{ secrets.DB_DRIVER }}
          DB_CONNECTION_TIMEOUT: ${{ secrets.DB_CONNECTION_TIMEOUT }}
          DB_MAX_POOL_SIZE: ${{ secrets.DB_MAX_POOL_SIZE }}
          JPA_DDL_AUTO: ${{ secrets.JPA_DDL_AUTO }}
          JPA_SHOW_SQL: ${{ secrets.JPA_SHOW_SQL }}
          JPA_OPEN_IN_VIEW: ${{ secrets.JPA_OPEN_IN_VIEW }}
          JPA_DATABASE_PLATFORM: ${{ secrets.JPA_DATABASE_PLATFORM }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          DOMINIO_URL: ${{ secrets.DOMINIO_URL }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_SMTP_AUTH: ${{ secrets.MAIL_SMTP_AUTH }}
          MAIL_STARTTLS: ${{ secrets.MAIL_STARTTLS }}
          RESET_PASSWORD_URL: ${{ secrets.RESET_PASSWORD_URL }}
          UNLOCK_ACCOUNT_URL: ${{ secrets.UNLOCK_ACCOUNT_URL }}

      # 4. Log in en DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Construir y subir la imagen Docker a DockerHub
      - name: Build and push Docker image
        run: |
          docker build user/passwordForgot/. --file user/passwordForgot/Dockerfile \
            --tag ${{ secrets.DOCKER_USERNAME }}/password-forgot-service:${{ github.run_number }} \
            --tag ${{ secrets.DOCKER_USERNAME }}/password-forgot-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/password-forgot-service:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/password-forgot-service:latest

      # 6. Desplegar en EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST_PASSWORD_FORGOT }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Verificar si Docker está instalado
            if ! command -v docker &> /dev/null; then
              echo "==> Installing Docker"
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -a -G docker ec2-user
            fi

            # Crear archivo .env para el contenedor
            echo "APP_NAME=${{ secrets.APP_NAME_PASSWORD_FORGOT }}" > /home/ec2-user/password-forgot-service.env
            echo "SERVER_PORT=${{ secrets.SERVER_PORT_PASSWORD_FORGOT }}" >> /home/ec2-user/password-forgot-service.env
            echo "DB_URL=${{ secrets.DB_URL }}" >> /home/ec2-user/password-forgot-service.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> /home/ec2-user/password-forgot-service.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/ec2-user/password-forgot-service.env
            echo "DB_DRIVER=${{ secrets.DB_DRIVER }}" >> /home/ec2-user/password-forgot-service.env
            echo "DB_CONNECTION_TIMEOUT=${{ secrets.DB_CONNECTION_TIMEOUT }}" >> /home/ec2-user/password-forgot-service.env
            echo "DB_MAX_POOL_SIZE=${{ secrets.DB_MAX_POOL_SIZE }}" >> /home/ec2-user/password-forgot-service.env
            echo "JPA_DDL_AUTO=${{ secrets.JPA_DDL_AUTO }}" >> /home/ec2-user/password-forgot-service.env
            echo "JPA_SHOW_SQL=${{ secrets.JPA_SHOW_SQL }}" >> /home/ec2-user/password-forgot-service.env
            echo "JPA_OPEN_IN_VIEW=${{ secrets.JPA_OPEN_IN_VIEW }}" >> /home/ec2-user/password-forgot-service.env
            echo "JPA_DATABASE_PLATFORM=${{ secrets.JPA_DATABASE_PLATFORM }}" >> /home/ec2-user/password-forgot-service.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/ec2-user/password-forgot-service.env
            echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> /home/ec2-user/password-forgot-service.env
            echo "DOMINIO_URL=${{ secrets.DOMINIO_URL }}" >> /home/ec2-user/password-forgot-service.env
            echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> /home/ec2-user/password-forgot-service.env
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> /home/ec2-user/password-forgot-service.env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> /home/ec2-user/password-forgot-service.env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> /home/ec2-user/password-forgot-service.env
            echo "MAIL_SMTP_AUTH=${{ secrets.MAIL_SMTP_AUTH }}" >> /home/ec2-user/password-forgot-service.env
            echo "MAIL_STARTTLS=${{ secrets.MAIL_STARTTLS }}" >> /home/ec2-user/password-forgot-service.env
            echo "RESET_PASSWORD_URL=${{ secrets.RESET_PASSWORD_URL }}" >> /home/ec2-user/password-forgot-service.env
            echo "UNLOCK_ACCOUNT_URL=${{ secrets.UNLOCK_ACCOUNT_URL }}" >> /home/ec2-user/password-forgot-service.env

            # Descargar la imagen Docker desde DockerHub
            echo "==> Pulling the latest Docker image"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/password-forgot-service:latest

            # Detener y eliminar cualquier contenedor existente
            if [ $(sudo docker ps -aq -f name=password-forgot-service) ]; then
              echo "==> Stopping and removing existing container"
              sudo docker stop password-forgot-service
              sudo docker rm password-forgot-service
            fi

            # Ejecutar el nuevo contenedor con el archivo .env
            echo "==> Starting a new container"
            sudo docker run -d --name password-forgot-service -p 80:${{ secrets.SERVER_PORT_PASSWORD_FORGOT }} \
              --env-file /home/ec2-user/password-forgot-service.env \
              ${{ secrets.DOCKER_USERNAME }}/password-forgot-service:latest

            # Verificar si el contenedor está corriendo
            echo "==> Verifying container status"
            if sudo docker ps -f name=password-forgot-service | grep password-forgot-service; then
              echo "==> Container is running successfully"
            else
              echo "==> Failed to start the container. Check the Docker logs for details."
              exit 1
            fi
