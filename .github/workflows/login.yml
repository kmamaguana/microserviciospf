name: Docker Image CI/CD for Login Service

on:
  push:
    paths:
      - 'user/login/**'
    branches: [ "test" ]
  pull_request:
    paths:
      - 'user/login/**'
    branches: 
      - "QA"
      - "main"

jobs:
  build-and-push:
    name: Build, Package, and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del c칩digo fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Instalar JDK y Maven
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 3. Construir el archivo .jar con Maven usando variables de entorno
      - name: Build .jar file
        run: mvn clean install -f user/login/pom.xml
        env:
          APP_NAME: ${{ secrets.APP_NAME_LOGIN }}
          SERVER_PORT: ${{ secrets.SERVER_PORT_LOGIN }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DRIVER: ${{ secrets.DB_DRIVER }}
          DB_CONNECTION_TIMEOUT: ${{ secrets.DB_CONNECTION_TIMEOUT }}
          DB_MAX_POOL_SIZE: ${{ secrets.DB_MAX_POOL_SIZE }}
          JPA_DDL_AUTO: ${{ secrets.JPA_DDL_AUTO }}
          JPA_SHOW_SQL: ${{ secrets.JPA_SHOW_SQL }}
          JPA_OPEN_IN_VIEW: ${{ secrets.JPA_OPEN_IN_VIEW }}
          JPA_DATABASE_PLATFORM: ${{ secrets.JPA_DATABASE_PLATFORM }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          DOMINIO_URL: ${{ secrets.DOMINIO_URL }}

      # 4. Log in en DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Construir y subir la imagen Docker a DockerHub
      - name: Build and push Docker image
        run: |
          docker build user/login/. --file user/login/Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/login-service:${{ github.run_number }} --tag ${{ secrets.DOCKER_USERNAME }}/login-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/login-service:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/login-service:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # 1. Conectar a EC2 y desplegar la aplicaci칩n
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Actualizar y configurar Docker
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
          
            # Descargar la imagen Docker desde DockerHub
            echo "==> Pulling the latest Docker image"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/login-service:latest
          
            # Verificar si el contenedor existe
            if [ $(sudo docker ps -aq -f name=login-service) ]; then
              echo "==> Stopping and removing existing container"
              sudo docker stop login-service || echo "Failed to stop container, possibly not running."
              sudo docker rm login-service || echo "Failed to remove container, ensure it is stopped."
            else
              echo "==> No existing container found with the name 'login-service'"
            fi
          
            # Iniciar un nuevo contenedor con la imagen m치s reciente
            echo "==> Starting a new container"
            sudo docker run -d --name login-service -p 80:80 \
              -e APP_NAME=${{ secrets.APP_NAME_LOGIN }} \
              -e SERVER_PORT=${{ secrets.SERVER_PORT_LOGIN }} \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_DRIVER=${{ secrets.DB_DRIVER }} \
              -e DB_CONNECTION_TIMEOUT=${{ secrets.DB_CONNECTION_TIMEOUT }} \
              -e DB_MAX_POOL_SIZE=${{ secrets.DB_MAX_POOL_SIZE }} \
              -e JPA_DDL_AUTO=${{ secrets.JPA_DDL_AUTO }} \
              -e JPA_SHOW_SQL=${{ secrets.JPA_SHOW_SQL }} \
              -e JPA_OPEN_IN_VIEW=${{ secrets.JPA_OPEN_IN_VIEW }} \
              -e JPA_DATABASE_PLATFORM=${{ secrets.JPA_DATABASE_PLATFORM }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
              -e DOMINIO_URL=${{ secrets.DOMINIO_URL }} \
              ${{ secrets.DOCKER_USERNAME }}/login-service:latest
          
            # Verificar si el contenedor est치 corriendo
            if sudo docker ps -f name=login-service | grep login-service; then
              echo "==> Container started successfully"
            else
              echo "==> Failed to start the container. Check the Docker logs for details."
              exit 1
            fi
